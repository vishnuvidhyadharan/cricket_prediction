import scrapy
from scrapy import Selector
from scrapy.http import Request


class AllMatchesSpider(scrapy.Spider):
	name = 'all_matches'
	allowed_domains = ['espncricinfo.com']
	start_urls = ['http://www.espncricinfo.com/ci/engine/series/index.html']
	xpaths='''response.xpath('//section[@class="series-summary-wrap"]').extract()[1]''','''
			response.xpath('//ul[@class="cscore_list"]/li/a[contains(@rel,
			 "event,boxscore,scorecard,match,desktop")]/@href').extract()
			''','''response.xpath('//div[@class="cell batsmen"]/a/@href').extract()
			''','''response.xpath('//*[@class="scorecard-section bowling"]/table/tbody/tr/td/a/@href').extract()
			''','''response.xpath('//div[@class="ciPlayernametxt"]/div/h1/text()').extract_first()
			''','''response.xpath('//div[@class="ciPlayernametxt"]/div/h3/b/text()').extract_first()'''

	def parse(self, response):
		seasons=response.xpath('//*[@class="season-links"]/a/@href').extract()
		x=0
		# for season in range(2,len(seasons)):
		for season in seasons:
			if x<35:
				absolute_url=response.urljoin(season)
				yield Request(absolute_url,callback=self.parse_season,meta={'absolute_url':absolute_url})
				#return absolute_url
				x+=1
				self.logger.info('parse\n')
	def parse_season(self,response):
		all_one_day=response.xpath('//section[@class="series-summary-wrap"]').extract()[1]
		y=str("#")+all_one_day+str("#")
		sel=Selector(text=y)	
		one_day=sel.xpath('//div[@class="teams"]/a/@href').extract()
		
		for day in one_day:
			# d=day.split('-')
			# for word in d:
			# 	if word in all_countries:
			yield Request(day,callback=self.parse_day,meta={'day':day})
					
			# 	next
	def parse_day(self,response):
		scorecards=[]
		cards1= response.xpath('//ul[@class="cscore_list"]/li/a[contains(@rel, "event,boxscore,scorecard,match,desktop")]/@href').extract()
		cards2=response.xpath('//ul[@class="reports-list content_link"]/li/a[contains(text(),"Scorecard")]/@href').getall()
		if cards1 != None:
			for card in cards1:
				card= "http://www.espncricinfo.com"+card
				scorecards.append(card)
		if cards2 != None:
			scorecards.extend(cards2)
		for scorecard in scorecards:
			yield Request(scorecard,callback=self.parse_result,meta={'scorecard':scorecard})
	def parse_result(self,response):
		
		#creating an empty list
		Player_URLs=[]
		countries=('New', 'South','Sri','West',
			'new', 'south','sri','west')
		

		#getting the match result
		result= response.xpath('//div[@class="cscore_notes"]/span/text()').extract_first()
		split_result=result.split(" ")
		no_result=('tied','Tied','abandoned','Abandoned','result','Result','No','Match')


		if split_result[0] not in no_result:
			if split_result[0] in countries:
				Winning_Team =split_result[0]+str(split_result[1])
				Winning_Margin =int(split_result[4])
				Runs_or_Wickets =split_result[5]
			else:

				Winning_Team =split_result[0]
				Winning_Margin =int(split_result[3])
				Runs_or_Wickets =split_result[4]
			print(Winning_Team)
			
		Season=response.xpath('//div[@class="cscore_info-overview"]/text()').get()
		Season=Season.split(" ")
		Season=Season[-1]

		#getting batting and bowling urls
		Batting_Player_URLs=response.xpath('//div[@class="cell batsmen"]/a/@href').extract()
		for player in Batting_Player_URLs:
			Player_URLs.extend(Batting_Player_URLs)
		Bowling_Player_URLs=response.xpath('//*[@class="scorecard-section bowling"]/table/tbody/tr/td/a/@href').extract()
		for player in Bowling_Player_URLs:
			# if player not in Player_URLs:
			Player_URLs.extend(Bowling_Player_URLs)

		for p in Player_URLs:
			yield Request(p,callback=self.parse_players,meta={'p':p,
									Winning_Team':Winning_Team,
									'Winning_Margin':Winning_Margin,
									'Runs_or_Wickets':Runs_or_Wickets,
									'Season':Season															})
		#meta will send one data at a time
			
	def parse_players(self,response):
		Player_name=response.xpath('//div[@class="ciPlayernametxt"]/div/h1/text()').extract_first()
		Country=response.xpath('//div[@class="ciPlayernametxt"]/div/h3/b/text()').extract_first()

		#calling the meta data
		Winning_Team = response.meta["Winning_Team"]
		Winning_Margin = response.meta["Winning_Margin"]
		Runs_or_Wickets = response.meta["Runs_or_Wickets"]
		Season = response.meta["Season"]
		#p=response.meta["p"]

		yield{'Player_name':Player_name,
			'Winning_Team':Winning_Team,
			'Winning_Margin':Winning_Margin,
			'Runs_or_Wickets':Runs_or_Wickets,
			'Season':Season,
			'Country':Country
			}
			
#this will give the name of the palyer and the result of the match.
